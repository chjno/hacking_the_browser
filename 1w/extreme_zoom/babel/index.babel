function getUserMedia(options, successCallback, failureCallback) {
  var api = navigator.getUserMedia || navigator.webkitGetUserMedia ||
    navigator.mozGetUserMedia || navigator.msGetUserMedia;
  if (api) {
    return api.bind(navigator)(options, successCallback, failureCallback);
  }
  alert('User Media API not supported.');
}

function getStream(type) {
  var constraints = {};
  constraints[type] = true;
  getUserMedia(constraints, function(stream) {
    var mediaControl = document.querySelector(type);
    if (navigator.mozGetUserMedia) {
      mediaControl.mozSrcObject = stream;
    } else {
      mediaControl.srcObject = stream;
      mediaControl.src = (window.URL || window.webkitURL).createObjectURL(stream);
    }
  }, function(err) {
    alert('Error: ' + err);
  });
}

window.onload = function() {
  getStream('video');
};

///////////////////
///////////////////

function log(...args) {
  let message = args.join(' ');
  $('#log').prepend('--&gt; ' + message + '<br>');
}

function warn(...args) {
  log(...args);
  $('#log').addClass('warn');
}

function hideLog() {
  $('#log').hide();
}

function showLog() {
  $('#log').show();
}

function clearLog() {
  $('#log').empty();
}

window.onerror = (error) => {
  $('#log').addClass('error').text(`Error: ${error}`);
}

function checkSupportFor(name, propertyName, propertyOwner=window) {
  if (!(propertyName in propertyOwner)) {
    warn(`No support for ${name}`)
  } else {
    log(`Supports ${name}!`);
    return true;
  }
}

function isInIframe() {
  return window.parent !== window;
}

$(() => {
  log('Ready!');
  showLog();
  $('#clear-log').click(clearLog);
});

//////////////////
//////////////////

function getPositionOptions() {
  let positionOptions = {
    enableHighAccuracy: false, // when true, a more accurate position is
                               // returned when possible (may take longer or use more battery power)
    timeout: Infinity, // will never stop attempting to locate
    maximumAge: 0, // can use a cached/old position
  };
  return positionOptions;
}

function watchPosition() {
  log('Attempting to start watching...');

  let watchId = navigator.geolocation.watchPosition(locateSuccess, locateError, getPositionOptions());
  
  $('#stop-watch').show();
  $('#stop-watch').data('watchId', watchId);
  $('#watch').hide();
}

// See http://www.html5rocks.com/en/tutorials/geolocation/trip_meter/#disqus_thread
// http://www.movable-type.co.uk/scripts/latlong.html
function calculateDistance(coords1, coords2) {
  let { latitude: lat1, longitude: lon1 } = coords1;
  let { latitude: lat2, longitude: lon2 } = coords2;
  
  let toRad = (number) => number * Math.PI / 180;
  
  var R = 6371; // km
  var dLat = toRad(lat2 - lat1);
  var dLon = toRad(lon2 - lon1);
  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
          Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * 
          Math.sin(dLon / 2) * Math.sin(dLon / 2); 
  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); 
  var d = R * c;
  return d;
}

let zoomNum = 14;

function getStaticMapImage(coords, zoomLevel) {
  let {latitude, longitude} = coords;
  return "https://maps.googleapis.com/maps/api/staticmap?center=" + latitude + "," + longitude + "&zoom=" + zoomLevel + "&size=300x300&sensor=false";
}

function locate() {
  log('Attempting to locate...');
  navigator.geolocation.getCurrentPosition(locateSuccess, locateError, getPositionOptions());
}

function locateSuccess(position) {
  log('successfully located you!');
  
  if (!startCoords) {
    startCoords = position.coords;
  }
  currentCoords = position.coords;

  $('#location').show();
  $('#no-location').hide();
  $('#zoom-in').show();
  $('#zoom-out').show();

  let properties = [
    'latitude', 'longitude', 'altitude', 'heading', 'speed', 'accuracy'
  ];
  
  properties.forEach(property => {
    let value = position.coords[property];
    $('#' + property).text(value);
  });
  let timestamp = new Date(position.timestamp);
  $('#timestamp').text(timestamp);

  $('#static-map-image').attr('src', getStaticMapImage(position.coords, zoomNum));
  $('#distance').text(calculateDistance(startCoords, currentCoords));
}

function locateError(error) {
  log('Error locating you: ' + error);
  
  $('#location-error').show();
  $('#location-error').text(`Error locating: ${error}`);
}

function stopWatching() {
  let watchId = $('#stop-watch').data('watchId');
  log('stop watching id:', watchId);
  
  navigator.geolocation.clearWatch(watchId);
  
  $('#stop-watch').hide();
  $('#watch').show();
}

let startCoords;
let currentCoords;

$(() => {
  $('#watch').click(watchPosition);  
  $('#stop-watch').click(stopWatching);
  $('#locate').click(locate);
  $('#zoom-in').click(zoomIn);
  $('#zoom-out').click(zoomOut);
});

function zoomIn() {
  if (zoomNum > -3 && zoomNum < 22) {
    $('#location').show();
    $('#cam').hide();
    $('#space').hide();
    zoomNum += 2;
    log('Zoom: ' + zoomNum);
    $('#static-map-image').attr('src', getStaticMapImage(currentCoords, zoomNum));
  } else if (zoomNum == 22) {
    log('Zoom: You view');
    $('#location').hide();
    $('#cam').show();
    $('#space').hide();
    zoomNum += 2;
  }
}

function zoomOut() {
  if (zoomNum > 0 && zoomNum < 25) {
    $('#location').show();
    $('#cam').hide();
    $('#space').hide();
    zoomNum -= 2;
    log('Zoom: ' + zoomNum);
    $('#static-map-image').attr('src', getStaticMapImage(currentCoords, zoomNum));
  } else if (zoomNum == 0) {
    log('Zoom: Space view');
    $('#location').hide();
    $('#cam').hide();
    $('#space').show();
    zoomNum -= 2;
  }
}